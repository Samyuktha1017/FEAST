name: Get Historical Features
description: Retrieve historical features from Feast and save as a CSV file at a user-specified path
inputs:
  - {name: entity_ids, type: String}
  - {name: feature_service_name, type: String}
  - {name: output_csv_path, type: String}
outputs:
  - {name: historical_features, type: CSV}
implementation:
  container:
    image: python:3.10
    command:
      - sh
      - -c
      - |
        (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'feast' 'pandas' || \
         PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'feast' 'pandas' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import pandas as pd
        from feast import FeatureStore

        parser = argparse.ArgumentParser()
        parser.add_argument("--entity_ids", type=str, required=True)
        parser.add_argument("--feature_service_name", type=str, required=True)
        parser.add_argument("--output_csv_path", type=str, required=True)
        args = parser.parse_args()

        store = FeatureStore(repo_path=".")
        ids = args.entity_ids.split(',')
        entity_df = pd.DataFrame({"student_id": ids})
        feature_service = store.get_feature_service(args.feature_service_name)
        df = store.get_historical_features(entity_df=entity_df, features=feature_service).to_df()

        os.makedirs(os.path.dirname(args.output_csv_path), exist_ok=True)
        df.to_csv(args.output_csv_path, index=False)
        print("âœ… Historical features written to:", args.output_csv_path)
    args:
      - --entity_ids
      - {inputValue: entity_ids}
      - --feature_service_name
      - {inputValue: feature_service_name}
      - --output_csv_path
      - {inputValue: output_csv_path}

name: Train Random Forest Model
description: Trains a Random Forest classifier using training data and saves the model to a user-specified path.
inputs:
  - {name: X_train, type: String}
  - {name: y_train, type: String}
  - {name: model_output_path, type: String}
outputs:
  - {name: trained_model, type: Model}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2' 'scikit-learn' 'joblib' || \
         PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2' 'scikit-learn' 'joblib' --user) && "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import json
        import os
        import pandas as pd
        import joblib
        from sklearn.ensemble import RandomForestClassifier

        parser = argparse.ArgumentParser()
        parser.add_argument("--X_train", type=str, required=True)
        parser.add_argument("--y_train", type=str, required=True)
        parser.add_argument("--model_output_path", type=str, required=True)
        args = parser.parse_args()

        # Load training data
        with open(args.X_train, "r") as f:
            X = pd.DataFrame(json.load(f))

        with open(args.y_train, "r") as f:
            y = json.load(f)

        # Train model
        model = RandomForestClassifier(random_state=42)
        model.fit(X, y)

        # Save model
        os.makedirs(os.path.dirname(args.model_output_path), exist_ok=True)
        joblib.dump(model, args.model_output_path)
        print("âœ… Model saved to:", args.model_output_path)
    args:
      - --X_train
      - {inputValue: X_train}
      - --y_train
      - {inputValue: y_train}
      - --model_output_path
      - {inputValue: model_output_path}
